/**********************************************************************************************************************
***************************************************      NOTES      ***************************************************
***********************************************************************************************************************/
• SEAN ALLEN VIDEOS
    - QUESTIONS TO ASK INTERVIEWERS
        + TO
            - Technology Stack: If they are doing like all objective-C with no plans to switch to Swift, then you can save time.
            - Knowledge Expansion - Ask carefully because that is clearly not what they are hiring me for.
                + The more you know about the entire stack helps you develop your own part in the stack.
            - Ask about the team!
                + How big is the team?
                + Experience spectrum - is there a lot of senior people or is it nice a diverse?
                    - Having a diverse experience allows for learning and teaching.
            - Growth within the position
                + If they promote from within, then cool cause generally want to grow with the company.
                + 
            - Where is the product at in its lifecycle?
                + Is it a brand new app or is it more mature?
                + On the edge of a lot of migrations/changes?
            - Is UI mainly done in code or Storyboard?
                + If it is storyboard, followups
                    - What do you do to avoid common pitfalls of using storyboard iun a larger team
            - Final Interview
                + Above & Beyond
                    - Creep on all of the people - See if they have done any conferences or such and then ask them about it.
    - LIFECYCLES
        + UIViewController
            - ViewDidLoad
                + Called when content view is created in memory
                + Has nothing to do with what is being displayed on the screen
                + Allows up to force unwrap our outlets
                + Called once initially, but is not called again throughout navigation because it is already present in the view hierarchy
            - ViewWillAppear
                + Called every time right before the content view is added to the apps view hierarchy
                + AKA just before it shows on the screen
                + Used when a view is being 'reused'
                + Common use cases
                    - Clearing out a text/search field
                    - Setting navigation bars to hidden for landing pages
            - ViewDidAppear
                + Called after the content view is added to apps view hierarchy
                + Use cases
                    - Animations: Only want them to start when the user is actually able to see them.
            - ViewWillDissapear
                + Called before the content view is removed form the apps view hierarchy
                + Use cases:
                    - Committing saved changes for forms.
            - ViewDidDissapear
                + Called after the content view is removed form the apps views hierarchy.
                + Use Cases:
                    - No examples given outside of stuff you'd want to do after the view is removed... Cool.
            - NO DEFAULT IMPLS
                + Simply, exist for us programmers to access the app at this specific point in time.
                + ViewWillLayoutSubviews
                    - Called when the content views bounds change, but BEFORE the lays out its subviews!
                    - Use Cases:
                        + I think... When you swap from portrait to landscape mode. After rotation, but before it displays.
                + ViewDidLayoutSubviews
                    - Called when the content views bounds change but AFTER it lays out its subviews!
    - ERROR HANDLING
        + Do, Try, Catch Blocks
            - Look for keyword 'Throws', if a function has it, then it requires a Do, Try, Catch BLOCK
            - Only need to add Throws to your functions if they can actually throw an error.
            - Common tasks with it...
                1. Retrieving image Data
                    let imageData = Data(contentsOf: URL(fileURLWithPath: "myFilePath"))
    - BOUNDS VS FRAMES ON UIVIEW
        + Bounds
            - Always on their own coordinate system with (0,0)(x,y) being the top left corner
            - Height & Width values remain the same on transform/rotation
        + Frame
            - Minimum space required for fitting the UIView on the screen
            - 
    - CONCURRENCY & THREADS
        + Main thread
            - Runs the UI View
        + Apple has created Grand Central Dispatch (GCD) & NSOperation Queues to help manage tasks
        + Queues
            - Default
                + Every App Automatically
                    1x Serial Queue
                        - Main
                    4x Concurrent Queues
                        - Background
            - Pros & Cons
                + Serial ~ Predictable & Slow
                + Concurrent ~ Unpredictable & Faster
            - Serial
                + Tasks happen 1 at a time, in order.
                + Predictable.  We like this.
                + Slower because Task#2 can't start until #1 finishes.
            - Concurrent
                + Tasks don't have to wait for prior tasks to complete.
                + No guarantees that Task #1 will finish first.
                + Faster than serial because multiple tasks are happening simultaneously.
    - OPTIONALS
        + An optional allows you to write more flexible and safer code and is denoted by a question mark.
            - Safer & more flexible because it won't crash our app if the variable is nil.
            - Image we have a box that is the parameter and the value inside is either:
                + Nil - Our box is empty
                + Value - Box has a value of required Data Type.
        + UNWRAPPING
            1. If Let
                + Safely unwraps an optional value by creating a temporary variable if optional isn't nil.
                + Example:
                    if let number - optionalNumber {
                        print("I have a value, it is \(number)")
                    } else {
                        print("I do not have a value, just nil")
                    }
            2. Guard Let
                + Guard statements provide an early exit out of the function if something happens to be nil. 
                + Perfect choice when the code of the function requires a value that isn't nil.
                + Used in functions to make an early exit!
                + Example:
                    func tripleNumber(number Int?) {
                        guard let number = number else {
                            print("Exiting Function")
                            return
                        }
                        print("My tripled number is \(3*number)")
                    }
            3. Force Unwrapping (!)
                + General rule - Don't do this.  
                + 90% of the time there is probably a better solution.  If force unwrap is nil, app crashes 100%.
                + Example:
                    let optionalNumber: Int?
                    let forcedUnwrap = optionalNumber! // Error because optional is nil.
            4. Optional Chaining
                + Optional chaining is very similar to Force Unwrapping, but it allows for your app to fail gracefully
                  without crashing the entire app due to a single variable not having a value.
                + Only used on objects that have properties.
                + Example:
                    struct Device {
                        var type: String
                        var price: Float
                        var color: String
                    }


                    var myPhone: Device?
                    let devicePrice = myPhone?.price // Optional Chaining - If my phone exists, grab the price.
                                                     // Optional Chaining - Automatically makes let an optional
                    if let devicePrice = devicePrice {
                        print("My total price = \(devicePrice * 1.06)")
                    }
    - FILTER, MAP, REDUCE
        + 




/**********************************************************************************************************************
***************************************************      Q & A      ***************************************************
***********************************************************************************************************************/
• Difference between Frames & Bounds?
    - Very similar until we start rotating/transforming
    - Frames position relative to its SuperView
    - Bounds position relative to its own coordinate system
    - Frame is the position in reference to its parent view or its SuperView
        + Has the smallest dimensions required for fitting the view
        + Has an (x,y) & (h,w) for UIView 
            Example:
                _____________                   |||     _____________   DIFF   SAME  
                |     |     |   FRAME  BOUND    |||     |    |      |   FRAME  BOUND
                |     |     |   Y=4    W=3      |||     |    Y      |   Y=2    W=3  
                |     Y     |   X=5    H=4      |||     |    /\     |   X=2    H=4  
                |-- X __W__ |   W=3             |||     |   /  \    |   W=7         
                |     |   | |   H=4             |||     |-X/    \   |   H=7         
                |   | |   | |                   |||     |  \     \  |               
                |   H |   | |                   |||     |   \    /  |               
                |   | |___| |                   |||     |    \  /   |               
                |___________|                   |||     |_____\/____|               

    - Bounds has its own coordinate system
        + Top left is 0,0 (x,y)
            - X,Y is always 0,0 since the bound is on its own coordinates 
        + The coordinates remain the same on transformation
        + No matter what the box will always have the same HxW
• What is concurrency?
    - Multitasking; doing multiple tasks at the same time.  
    - More cores ya got, more concurrent tasks you can run.
• What's a queue?
    - First In, First Out
• What types of queue are there?
    1. Serial - Tasks happen 1 at a time, in order.
    2. Concurrent - Tasks don't have to wait for prior tasks to complete.
• How would you used Grand Central Dispatch?
    - By grabbing the main thread to update the UI, for say reloading the data in a table view.
• 
• 