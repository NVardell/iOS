/**********************************************************************************************************************
***************************************************      LINKS      ***************************************************
***********************************************************************************************************************/
• REPOS
    - 3rd PARTY
        + Alamofire: https://github.com/Alamofire/Alamofire
        + IQKeyboardManager: https://github.com/hackiftekhar/IQKeyboardManager
• CORE LIBRARIES
    - https://www.swift.org/core-libraries/




/**********************************************************************************************************************
*********************************************      GENERAL PRACTICES      *********************************************
***********************************************************************************************************************/
• PROTOCOLS
    - Define Protocol in same class file it'll be used in.
• DELEGATES
    - In place of coding delegates, from Storyboard you can Control drag object to the most left yellow icon atop view,
      and then select 'Delegate' from the mini popup menu that appears
• OBSERVERS
    - Remove them when they are no longer necessary.



/**********************************************************************************************************************
***************************************************      NOTES      ***************************************************
***********************************************************************************************************************/
• FILE TYPES
    - *.Storyboard: User Interface File, Opens in Interface Builder Editor - Main.Storyboard
        + Navigation Controller
            * Changes here will be reflected across all of the views.
        + Segues
            * Default display is a 'Model Transition', this is more like a pop-up.
            * It Slides up from the bottom and covers the initial view.
        + Table Views & Table View Cells
            * View for displaying a scrollable list of rows like Messages, emails, etc.
            * CELL
                - Table View Cell, aka UITableViewCell, aka Prototype Cell is a single template cell for 
                  all rows in table view.
                - Create new Cocoa Touch File for Table View Call & Check the 'XIB' box, so that a *.xib
                  file is also generated, along side the *.swift file.
                    + XIB: Design file
            * ROWS
                - Each row in a table view is a UITableViewCell object.
                - Rows can be grouped into sections, and the sections can optionally have headers/footers.
            * INTERACTIONS
                - User can edit a table view by inserting, deleting, and reordering table cells.
            * PROTOCOLS
                - UITableViewDataSource: Responsible for telling TableView how many cells it needs & populating them.
                    + Returns # of rows & Provides a Cell object for every row.
                - UITableViewDelegate: Responsible for managing table interactions like selection, deleting, etc.
    - *.xib: Design file for UI ~ Old name was *.Nib (I think...)
    - *.swift: Project Files: App's Source Code Implementations
    - *.plist: Stores values in Key:Value pairs.
• IMPORTANT FILES
    - AppDelegate.swift
        + Handles changes to the app like launching.
        + Handles application interactions, such as...
            - Application Opens
                + application(..., didFinishLaunchingWithOptions: launchOptions,...)
            - App Switching
                + applicationDidEnterBackground(...)
            - App Closes
                + applicationWillTerminate(...)
                    - Trigger: User swiping app away
                    - Trigger: OS reclaiming memory (Might need it for some mem intensive gaming app.)
    - SceneDelegate.swift
        + For more modern versions of apps commonly for iPad, where you can have more than one app open at a time.
        + The display of the open app is set in this 'scene'
        + Handles any interruptions that might occur outside of the application, such as...
            - Getting a phone call = Pause Music, Video, User Animation/Data Entry
            - User drags up from bottom to open Multi-tasking View 
                + sceneWillResignActive(_ scene: UIScene)
                    - Called before user switches
                + sceneDidEnterBackground(_ scene: UIScene)
                    - User selected a different app & yous went into background
            - User switches between apps = Save current state
                + sceneWillEnterForeground(_ scene: UIScene)
                + sceneWillEnterBackground(_ scene: UIScene)
            - Loading app initially
                + sceneWillEnterForeground(_ scene: UIScene)
                + sceneWillBecomeActive(_ scene: UIScene)
• DATA TYPES
    - CORE
        + Int
        + Double
            - Methods
                + .round() -> Rounds to whole number.
        + Float
        + Bool
        + String
    - COLLECTIONS
        + Array
            - Maintains Order
            - Ex. let array = [ 1, 2, 3 ]
        + Set
            - Does NOT Maintain Order
            - Stores Distinct Values Of The Same Type
            - Ex. var musicSet: Set = ["Rock", "Classical", "Hip hop"]
        + Dictionary
            - Stores Associations Between Keys & Values of the Same Type
            - Ex. var airports = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
    - MODELS
        + Singleton
            - Singletons provide a globally accessible, shared instance of an object.
            - Only one copy exists and can be shared across all of your classes & objects.
• KEYWORDS
    - ANY
        + Encompasses ALL Data Types
    - ANYOBJECT
        + Objects derived from classes
    - AS
        + Used in Type Casting
            * Type Casting is a way to check the type of an instance, or to treat that instance as a different
              SuperClass or SubClass from somewhere else in its own Class Hierarchy.
            * Implemented in Swift with the 'is' & 'as' operators.
        + Variations 
            * as = Upcast 
                - Not used very often.
                - Raises object to its SuperClass Type
                - Does NOT require a ? or ! because it is guaranteed to succeed. (Won't Build otherwise, lol.)
                - Requires the object being Upcasted to be inheriting the SuperClass.
                - Example
                    let newCell = messageCell as UITableViewCell
            * as? = Optional(?) Downcast
                - Safe option.  Only continue if the Downcast is successful, unlike ! forcing the Downcast and failing.
                - Example
                    if let fish = neighbors[1] as? Fish { fish.swim() }
            * as! = Forced Downcast
                - Problems with Forcing a downcast is it compiles, but easily triggers runtime exception if cast fails.
                - Example
                    let messageCell = cell as! MessageCell
    - CATCH
    - CLASS
    - DO
    - DYNAMIC
        + Makes a property dynamic as opposed to static.
        + Allows the property to be monitored for change at runtime
        + Modifier from Objective-C, so '@objc' is required in definition.
            - Ex. @objc dynamic var age: Int = 0
    - EXTENSION
        + Defining an Extension
                extension SomeType { /* Add new functionality! */ }
        + SomeType (From above) can be any existing Class, Struct, or Protocol.
        + Commonly, used to define default implementations for required protocol methods so that adoptions
          are no longer required to implement them.
    - FUNC
    - IS
    - LAZY
        + Identical to lazy people; task only gets done the moment it is needed.
        + Loads the value when it gets called and is required to exist.
        + Beneficial because it saves on memory.
    - LET
    - MUTATING
        + Required when altering value of a Struct due to the immutability of Structs
        + Tells Swift compiler that it needs to create a brand new copy of the struct with the updated value.
    - PROTOCOL
        + Defining a protocol
            protocol MyProtocol { /* Define Protocol Requirements. */}
        + Using a protocol
            struct MyStruct: MyProtocol {}
        + Structures & classes can adopt protocols.
    - STATIC
        + Makes a variable a 'Type Property', so it that it's associated with the structs Data Type.
        + Doesn't require an instance to access property value
            * Example - Constants
                struct K { 
                    static let appTitle="Awesome Title" 
                    static func typeMethod() { // Do Stuff }
                }
                print(K.appTitle) // Awesome Title
                K.typeMethod()
    - STRUCT
        + Value Type ~ Copied whenever it is used. 
        + Concept ~ Your changes won't appear for me on my copy & my changes won't appear for you on your copy.
    - THROWS
    - TRY
    - TYPEALIAS
    - VAR
• OPERATORS / OPERATIONS
    - Ternary Operator
        + Follows the form of: value = condition ? valueIfTrue : valueIfFalse
    - Optional (?)
        + Ways to work with them?
            1. (!) Force Unwrapping
                - Arguably, the least safe option.
                - Essentially, tells xCode that I promise it will never be nil.
            2. Check nil
                - If check. Kinda dumb cause ya still gotta force unwrap.
            3. Optional Binding
                - if let safeOptional = optional { safeOptional .... }
            4. (??) Nil Coalescing Operator
                - optional ?? defaultValue
                - Supplies a default value for the optional preventing nil errors. 
            5. Optional Chaining
                - optional?.property
                - optional?.method()
                - If the optional is NOT nil, then continue down the chain(.).
    - Force Unwrap (!)
    - Nil Coalescing Operator (??)
        + Used when the left side could be nil.  Assigning right value if it is.
        + Ex.  return categories?.count ?? 1 // If Categories is nil, return 1
    - CLOSURES
        + Closures are anonymous functions. 
        + Provide anonymous parameter names ($0...)
        + Provide Type Inference so explicit data typing is not required.
        + Converting a function to a closure takes a couple modifications.
                1. Remove 'func funcName' 
                2. Move left brace '{' from end of line to beginning of line.
                3. Add keyword 'in' where left bracket '{' was.
                Ex.
                    func sum(n1:Int, n2:Int) -> Int{ return n1 + n2 }
                    { (n1:Int, n2:Int) -> Int in return n1 + n2 }
                    { (n1, n2) -> in return n1 + n2 }
                    { $0 + $1 }
        + Generic Closure Syntax
            { ('parameters') -> 'return type' in 'statements' }
        + If a Closure is an input in a function, you can highlight it in xCode and hit enter to auto insert.
• LIBRARIES
    - APPLE
        + Foundation
            - The Foundation framework defines a base layer of functionality that's required for almost all apps.
            - Common Objects found in Foundation Library:
                + NSString, NSNumber, NSData, NSDate, JSONSerialization, DateFormatter, FileManager
            - Apples High Level Functions
                1. Map
                2. Reduce
                3. Filter
        + LibDispatch
            - Grand Central Dispatch (GCD or libdispatch)
            - Provides comprehensive support for concurrent code execution on multi-core hardware.
        + XCTest
            - The XCTest library provides a common framework for writing unit tests in Swift.
    - 3rd PARTY
        + Alamofire
            - Elegant HTTP networking library
        + IQKeyboardManager
            - Manages Keyboard and UI so buttons & inputs are not covered up.
        + Realm
            - Data Persistence. Udemy favorite.
• PACKAGE MANAGERS
    - Monitors project packages for changes.
    - Different packages support different managers.
        + How to know what manager projects support?
            - General rule of thumb is... look out for specific file extensions in project root
                + *.podspec = CocoaPods
                + *.swift = Swift Package Manager
    - Most common managers
        + SwiftPM
            - File -> Swift Packages -> Add Package Dependency (Old Version - Will add new when I remember.)
        + CocoaPods
            - Probs most popular
            - CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects. 
            - It has over 86 thousand libraries and is used in over 3 million apps. 
            - CocoaPods is built with Ruby and is installable with the default Ruby available on macOS.
            - Important Files
                + Podfile
                    - User edits to add desired pods
                + Podfile.lock
                    - Generated when running install command
                    - Contains version numbers for pods
                + *.podspec
                    - Details specifics on the dependency like minimum ios, swift versions, etc.
        + Carthage
            - Angela HATES it with undying passion; does not suggest it.
• CONTROLLERS
    - Navigation Controller
        + Method: Pop to Root = Redirect View to Home View
            Ex. navigationController?.popToRootViewController(animated: true)
• PERSISTENCE
    - Data can be persisted locally by...
        + User Defaults
            - UserDefaults is an interface for the users plist file, where you store key:value pairs
              persistently across launches of your app.
            - Saved in a plist file.
            - Commonly used for saving User Preferences
            - Should really only be used to store very small bits of data.
            - It is not a database and should NOT be used like one by shoving a million things into it.
            - The entire UserDefaults plist file has to be loaded up before launching the app,
              so the larger it is, the more time it takes to launch and more storage it takes up on their phone.
            - A Singleton
            - Does not allow custom objects to be stored in it.
            - Quickly persist small bits of data like... nickname, top score, clan tag, ect.
        + Codable (Protocol for Encoding/Decoding)
            - Flash freeze custom objects (Since  UserDefaults does not allow custom objects.)
            - Access Docs folder on device
            - Plist file should ALWAYS be under 100kb (kilobytes)
        + Keychain
            - API that allows us to save small bits of data securely inside a table
        + SQLite
            - Persist large amounts of data & query it
            - A very large percent of apps use this on the backend.
            - Been around for a long long time
        + FBDB
            - Udemy mentioned to check it out.
        + Core Data
            - Notes
                + SQL~ish Object-Oriented database
                + Can use SQLite as the database
                + Arguably not a database, because it allows for so much more.  
                    - Allows converting individual database tables into objects that you can easily manipulate using code.
                    - Things that SQLite can't, such as monitoring changes in the database.
            - Usage Notes
                + Data Model File = *.xcdatamodeld
                + Entities ≈ DB Tables
                    - Attributes: The fields that make up the entity & their Data Type
                    - IMPORTANT NOTE: In Entity Inspector make sure "Class:Module" is changed to 'Current Product Module'.
                    - Class:CodeGen
                        + Class Definition: Auto Generates Classes from Entities
                            - Generates 2 different files
                                + CoreData Class Swift File
                                + CoreData Properties Swift File
                        + Category/Extension: Most used.  
                            - When you want to add additional code to Model. 
                            - Requires us to make our own Model with matching name.
                            - Models must inherit NSManagedObject in order to work.
                        + Manual/None: Least used.  We do everything as far as setting up models goes.  xCode generates nothing.
                + NSPersistentContainer
                    - Default persistent container is a SQLite database.
                    - Yes it can be other things, such as XML, but most generically it will always be SQLite database.
                + NSPredicate
                    - In order to query Core Data, NSPredicate is required
        + Realm
            - A faster & easier database solution
            - Open-source framework
            - Faster & Easier database solution compared to Core Data.
            - Quickly, becoming one of the most popular ways of persisting data locally on device.
• 




• NETWORKING
    - General Steps for interacting with APIs
        1. Create a URL
        2. Create a URLSession
        3. Give URLSession a task
        4. Start the task
• MISC
    - Anonymous Parameters
        * Use '$' and an index location to refer to a parameter.
            Ex. $0
    - If the last parameter of a function is a Closure, you can omit the last parameter name
      & close the input section; simply, having the closure trailing at the end of line.
        Ex.
            let result = calc(n1:2, n2:3) { $0 + $1 }
    - Computed Properties
        * A variable of a class or struct that is computed on the fly when it is created.
        * General syntax is:
                var myComputedProperty: Int { return 2+4 }
    - TypeAlias
        * Single Protocol that combines multiple Protocols.
        * Common example is 'Codable' which includes 'Decodable' & 'Encodable' for en/decoding to JSON.
    - Location
        + Requires importing CoreLocation package to access a devices location
        + Update info.plist file to have message for the internal alert requesting user location
    - Property List File
        + .plist 
        + File that is automatically created with every xCode project.
        + Stores configuration info for the app at runtime. (When the app is running.... OBVIOUSLY...)
        + Info is stored in key/value pairs, similar to a Dictionary; key = property name & value = config
            * Ex. Light/Dark Mode is one of these key-value pairs.
                key:Status Bar Style, value:String=UIStatusBarStyleLightContent
    - Ranges
        + Half Open: let halfOpenRange = 1..<5
        + Closed: let closedRange = 1...5
    - Properties
        + Stored
            - Manually set values
                + Constant: let name = "Name"
                + Variable: var name = "Name"
        + Computed
            - Takes a stored value and uses it to automatically calculate additional properties.
            - Kind of like a formula in an excel sheet.
            - Requires type declaration. 
                Ex. var numOfSlices: Int { return pizzaInches-4 }
            - Requires being a var. (NOT a let.)
        + Observed
            - Arguably a type of Computed Property due to the fact that it contains logic; however, it doesn't 
            require an explicit type declaration
    - Access Levels
        1. Private ~ Only accessible within current braces
            + Main goal for private is preventing value mods from outside classes than it is actually used.
        2. File Private ~ Only accessible within current file
        3. Internal ~ Default. Only accessible within current app module
        4. Public ~ Accessible within other modules. (More for Frameworks, Libraries, SDKs.)
        5. Open ~ Everything is accessible & modifiable. (Can be overridden, Public makes this not possible.)
    - Tuple
        + Temporary set of data that can be created on the fly in a quick n dirty way without having to 
          explicitly create a class/struct for it.
    - ML
        + Machine Learning: Field of study that gives computers the ability to learn without being explicitly programmed. - Arthur Samuel
        + There are two primary categories for Machine Learning
            1. Supervised
                - Telling the program it's wrong/right. 
                - Labeled Training Data.
                - Primary solutions used are
                    1. Regression
                        + Used when we want to estimate a value such as salary based on years experience.
                    2. Categorization
                        + Used when we want to place items into separate categories, like cats & dogs.
            2. Unsupervised
                - 

