/**********************************************************************************************************************
***************************************************      LINKS      ***************************************************
***********************************************************************************************************************/
• REPOS
    - 3rd PARTY
        + Alamofire: https://github.com/Alamofire/Alamofire
        + IQKeyboardManager: https://github.com/hackiftekhar/IQKeyboardManager
• CORE LIBRARIES
    - https://www.swift.org/core-libraries/



/**********************************************************************************************************************
*********************************************      GENERAL PRACTICES      *********************************************
***********************************************************************************************************************/
• PROTOCOLS
    - Define Protocol in same class file it'll be used in.



/**********************************************************************************************************************
***************************************************      NOTES      ***************************************************
***********************************************************************************************************************/
• FILE TYPES
    - *.Storyboard: User Interface File, Opens in Interface Builder Editor - Main.Storyboard
    - *.xib: Design file for UI ~ Old name was *.Nib (I think...)
    - *.swift: Project Files: App's Source Code Implementations
    - *.plist: Stores values in Key:Value pairs.
• IMPORTANT FILES
    - AppDelegate.swift
        + Handles changes to the app like launching.
        + Handles application interactions, such as...
            - Application Opens
                + application(..., didFinishLaunchingWithOptions: launchOptions,...)
            - App Switching
                + applicationDidEnterBackground(...)
            - App Closes
                + applicationWillTerminate(...)
                    - Trigger: User swiping app away
                    - Trigger: OS reclaiming memory (Might need it for some mem intensive gaming app.)
    - SceneDelegate.swift
        + For more modern versions of apps commonly for iPad, where you can have more than one app open at a time.
        + The display of the open app is set in this 'scene'
        + Handles any interruptions that might occur outside of the application, such as...
            - Getting a phone call = Pause Music, Video, User Animation/Data Entry
            - User drags up from bottom to open Multi-tasking View 
                + sceneWillResignActive(_ scene: UIScene)
                    - Called before user switches
                + sceneDidEnterBackground(_ scene: UIScene)
                    - User selected a different app & yous went into background
            - User switches between apps = Save current state
                + sceneWillEnterForeground(_ scene: UIScene)
                + sceneWillEnterBackground(_ scene: UIScene)
            - Loading app initially
                + sceneWillEnterForeground(_ scene: UIScene)
                + sceneWillBecomeActive(_ scene: UIScene)
• DATA TYPES
    - CORE
        + Int
        + Double
            - Methods
                + .round() -> Rounds to whole number.
        + Float
        + Bool
        + String
    - COLLECTIONS
        + Array
            - Maintains Order
            - Ex. let array = [ 1, 2, 3 ]
        + Set
            - Does NOT Maintain Order
            - Stores Distinct Values Of The Same Type
            - Ex. var musicSet: Set = ["Rock", "Classical", "Hip hop"]
        + Dictionary
            - Stores Associations Between Keys & Values of the Same Type
            - Ex. var airports = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
    - OTHER
        + Singleton
            - Singletons provide a globally accessible, shared instance of an object.
            - Only one copy exists and can be shared across all of your classes & objects.
• KEYWORDS
    - ANY
    - ANYOBJECT
    - AS
    - CATCH
    - DO
    - EXTENSION
    - FUNC
    - IS
    - LET
    - PROTOCOL
        + Defining a protocol
            protocol MyProtocol { /* Define Protocol Requirements. */}
        + Using a protocol
            struct MyStruct: MyProtocol {}
        + Structures & classes can adopt protocols.
    - STATIC
    - THROWS
    - TRY
    - TYPEALIAS
    - VAR
• LIBRARIES
    - APPLE
        + Foundation
            - The Foundation framework defines a base layer of functionality that's required for almost all apps.
            - Common Objects found in Foundation Library:
                + NSString, NSNumber, NSData, NSDate, JSONSerialization, DateFormatter, FileManager
        + LibDispatch
            - Grand Central Dispatch (GCD or libdispatch)
            - Provides comprehensive support for concurrent code execution on multi-core hardware.
        + XCTest
            - The XCTest library provides a common framework for writing unit tests in Swift.
    - 3rd PARTY
        + Alamofire
            - Elegant HTTP networking library
        + IQKeyboardManager
            - Manages Keyboard and UI so buttons & inputs are not covered up.
        + Realm
            - Data Persistence. Udemy favorite.
• PACKAGE MANAGERS
    - Monitors project packages for changes.
    - Different packages support different managers.
        + How to know what manager projects support?
            - General rule of thumb is... look out for specific file extensions in project root
                + *.podspec = CocoaPods
                + *.swift = Swift Package Manager
    - Most common managers
        + SwiftPM
            - File -> Swift Packages -> Add Package Dependency (Old Version - Will add new when I remember.)
        + CocoaPods
            - Probs most popular
            - CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects. 
            - It has over 86 thousand libraries and is used in over 3 million apps. 
            - CocoaPods is built with Ruby and is installable with the default Ruby available on macOS.
            - Important Files
                + Podfile
                    - User edits to add desired pods
                + Podfile.lock
                    - Generated when running install command
                    - Contains version numbers for pods
                + *.podspec
                    - Details specifics on the dependency like minimum ios, swift versions, etc.
        + Carthage
            - Angela HATES it with undying passion; does not suggest it.
• PERSISTENCE
    - Data can be persisted locally by...
        + User Defaults
            - UserDefaults is an interface for the users plist file, where you store key:value pairs
              persistently across launches of your app.
            - Saved in a plist file.
            - Commonly used for saving User Preferences
            - Should really only be used to store very small bits of data.
            - It is not a database and should NOT be used like one by shoving a million things into it.
            - The entire UserDefaults plist file has to be loaded up before launching the app,
              so the larger it is, the more time it takes to launch and more storage it takes up on their phone.
            - A Singleton
            - Does not allow custom objects to be stored in it.
        + Quotable (?)
            - Access Docs folder on device
        + Core Data
            - SQL ~ish backend DB
• 




• NETWORKING
    - General Steps for interacting with APIs
        1. Create a URL
        2. Create a URLSession
        3. Give URLSession a task
        4. Start the task