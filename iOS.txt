/**********************************************************************************************************************
***************************************************      TERMS      ***************************************************
***********************************************************************************************************************/
• API: Application Programming Interface
• CG: Core Graphic
• IB: Interface Builder
• IBOutlet: Interface Builder Outlet (Code version that references an object we added to UI.)
• MVC: Model, View, Controller
• VC: View Controller
• Trailing Closure: Function call that end with a Closure, so it is pulled out and placed after function.
• JSON: JavaScript Object Notation
• CL: Core Location
• SPM: Swift Package Manager




/**********************************************************************************************************************
***************************************************      NOTES      ***************************************************
***********************************************************************************************************************/
• GENERIC
    - Main.Storyboard AKA Interface Builder.
    - Anonymous Parameters
        + Use '$' and an index location to refer to a parameter.
            Ex. $0
• FIREBASE
    - Using it in Flash Chat for...
        + User Registration
        + 
• DESIGN PATTERNS
    - A proven solution to a common problem
    - POPULAR PATTERNS
        + MVC: Model View Controller
            * Model: Data & Logic -> Sends data to Controller
            * View: User Interface -> Sends input events to Controller
            * Controller: Mediator -> Modifies View & Makes Requests to Models
        + DELEGATE:
            * 
• SWIFT
    - VIEW CONTROLLER OBJECTS
        + Segues
            * Default display is a 'Model Transition', this is more like a pop-up.
            * It Slides up from the bottom and covers the initial view.
        + Table Views
            * View for displaying lists.
    - MISC
        + If the last parameter of a function is a Closure, you can omit the last parameter name
          & close the input section; simply, having the closure trailing at the end of line.
            Ex.
                let result = calc(n1:2, n2:3) { $0 + $1 }
        + Computed Properties
            - A variable of a class or struct that is computed on the fly when it is created.
            - General syntax is:
                    var myComputedProperty: Int { return 2+4 }
        + TypeAlias
            - Single Protocol that combines multiple Protocols.
            - Common example is 'Codable' which includes 'Decodable' & 'Encodable' for en/decoding to JSON.
        + Location
            - Requires importing CoreLocation package to access a devices location
            - Update info.plist file to have message for the internal alert requesting user location
        + Property List File
            - .plist 
            - File that is automatically created with every xCode project.
            - Stores configuration info for the app at runtime. (When the app is running.... OBVIOUSLY...)
            - Info is stored in key/value pairs, similar to a Dictionary; key = property name & value = config
                * Ex. Light/Dark Mode is one of these key-value pairs.
                    key:Status Bar Style, value:String=UIStatusBarStyleLightContent
        + Ranges
            - Half Open: let halfOpenRange = 1..<5
            - Closed: let closedRange = 1...5
        + 3rd Party Libraries
            - Package Dependency Managers
                * Monitors project packages for changes.
                * How to know what manager projects support?
                    + General rule of thumb is... look out for specific file extensions in project root
                        - *.podspec = CocoaPods
                        - *.swift = Swift Package Manager
                * Some Popular Managers are....
                    + Swift Package Manager
                        - File -> Swift Packages -> Add Package Dependency
                    + Carthage
                        - Angela does not suggest it.
                    + Cocoa Pods
                         - Important Files
                            * Podfile
                                - User edits to add desired pods
                            * Podfile.lock
                                - Generated when running install command
                                - Contains version numbers for pods
                            * *.podspec
                                - Details specifics on the dependency like minimum ios, swift versions, etc.
                         - All written in Ruby
                         - Pods used so far...
                            1. CLTypingLabel ~ Animating~ish Text
            - Popular Libraries
                * Alamofire ~ github.com/Alamofire/Alamofire
    - DATA TYPES
        + Int
        + Float
        + Doubles
            - Functions 
                * .round() -> Rounds to whole number.
        + Bool
        + String
        + Array
            - Example: let array = [ 1, 2, 3 ]
            - Maintains order.
        + Dictionary
            - Example: let contacts = [ "Nate": 123456789, "Michael": 123456789, "Aziz": 123456789 ]
    - HIGH LEVEL FUNCTIONS
        + Apple has 3 of them, and they can be extremely helpful and reduce a lot of useless code.
            1. Map
            2. Reduce
            3. Filter     
    - OPTIONALS
        + Ways to work with them?
            1. (!) Force Unwrapping
                - Arguably, the least safe option.
                - Essentially, tells xCode that I promise it will never be nil.
            2. Check nil
                - If check. Kinda dumb cause ya still gotta force unwrap.
            3. Optional Binding
                - if let safeOptional = optional { safeOptional .... }
            4. (??) Nil Coalescing Operator
                - optional ?? defaultValue
                - Supplies a default value for the optional preventing nil errors. 
            5. Optional Chaining
                - optional?.property
                - optional?.method()
                - If the optional is NOT nil, then continue down the chain(.).
    - PROTOCOLS
        + Convention: Define Protocol in same class file it'll be used in.
        + Defining a protocol
            protocol MyProtocol { /* Define Protocol Requirements. */}
        + Using a protocol
            struct MyStruct: MyProtocol {}
        + Structures & classes can adopt protocols.
    - NETWORKING (3rd PARTY APIs)
        + Steps to setup networking
            1. Create a URL
            2. Create a URLSession
            3. Give URLSession a task
            4. Start the task
    - CLOSURES
        + Closures are anonymous functions. 
        + Provide anonymous parameter names ($0...)
        + Provide Type Inference so explicit data typing is not required.
        + Converting a function to a closure takes a couple modifications.
                1. Remove 'func funcName' 
                2. Move left brace '{' from end of line to beginning of line.
                3. Add keyword 'in' where left bracket '{' was.
                Ex.
                    func sum(n1:Int, n2:Int) -> Int{ return n1 + n2 }
                    { (n1:Int, n2:Int) -> Int in return n1 + n2 }
                    { (n1, n2) -> in return n1 + n2 }
                    { $0 + $1 }
        + Generic Closure Syntax
            { ('parameters') -> 'return type' in 'statements' }
        + If a Closure is an input in a function, you can highlight it in xCode and hit enter to auto insert.
    - EXTENSIONS
        + Defining an Extension
                extension SomeType { /* Add new functionality! */ }
        + SomeType (From above) can be any existing Class, Struct, or Protocol.
        + Commonly, used to define default implementations for required protocol methods so that adoptions
          are no longer required to implement them.
    - LOOPS
        + For In Loops
        + While Loops


