/**********************************************************************************************************************
***************************************************      TERMS      ***************************************************
***********************************************************************************************************************/
• API: Application Programming Interface
• CG: Core Graphic
• CL: Core Location
• IB: Interface Builder
• IBOutlet: Interface Builder Outlet (Code version that references an object we added to UI.)
• JSON: JavaScript Object Notation
• MVC: Model, View, Controller
• PM: Package Manager
• SPM: Swift Package Manager
• SwiftPM: Swift Package Manager
• Trailing Closure: Function call that end with a Closure, so it is pulled out and placed after function.
• VC: View Controller
• GCD: Grand Central Dispatch AKA 'LibDispatch' Framework
• UUID: Universally Unique IDentifier






/**********************************************************************************************************************
***************************************************      NOTES      ***************************************************
***********************************************************************************************************************/
• LIFECYCLES
    - Application Lifecycle
        1. 
    - ViewController Lifecycle
        1. View Loads -> viewDidLoad()
            - Only happens once!
        2. Before View Displays -> viewWillAppear()
            - Good place to make UI changes before presenting to user 
        3. View Appears on Screen -> viewDidAppear()
            - Good time to start timers/animations or anything the user can visually see
        4. Before View Disappears -> viewWillDisappear()
            - User triggered event to go back/forward/away from the current view being displayed
            - Good time to stop animations or hide/unhide UI elements like NavBars.
        5. View Went ByeBye -> viewDidDisappear()
            - Doesn't mean it was destroyed; user just can't see it anymore.
• DESIGN PATTERNS
    - A proven solution to a common problem
    - POPULAR PATTERNS
        + MVC: Model View Controller
            * Model: Data & Logic -> Sends data to Controller
            * View: User Interface -> Sends input events to Controller
            * Controller: Mediator -> Modifies View & Makes Requests to Models
        + DELEGATE:
            * 
• FIREBASE
    - Using it in Flash Chat for...
        + Authentication
            * User Registration
            * User Login/Logout
        + Firestore
            * Created Database
• XCODE
    - TRICKS
        + When a functions placeholders ends with a function placeholder,
            Example: 
                alert.addTextField(configurationHandler: ((UITextField) -> Void)?)
          Selecting the placeholder & pressing 'Enter' will automatically insert that closure. 
            Example:
                // Changes above example into:
                alert.addTextField { (UITextField) in <#code#> }
• SECURITY
    - Sandboxing
        + Apps are sandboxed on iOS so that they can't access other apps or operating system files

